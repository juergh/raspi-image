#!/bin/bash -eu
#
# Build and manipulate a Raspberry Pi image
#

DISK_UUID=deadbeef

BOOT_START=2048   # Starting sector of boot partition
BOOT_SIZE=128     # Boot partition size (in MB)

ROOTFS_SIZE=4096  # Rootfs partition size (in MB)

function out()
{
	local rc=${?}

	trap - INT TERM EXIT HUP

	# Clean up the mount and loop devices
	umount_dev
	losetup_detach

	# Remove the temporary directory
	if [ -n "${TMPDIR}" ] ; then
		rm -rf "${TMPDIR}"
	fi

	if [ "${rc}" -ne 0 ] ; then
		# Emit a message if the script failed
		pr_error "Script failed"
	fi

	exit "${rc}"
}

function dry_run_exit()
{
	if [ "${DRY_RUN}" -eq 1 ] ; then
		pr_info "Dry-run, exiting..."
		exit
	fi
}

function pr_info()
{
    echo -e "\033[33m${*}\033[0m"

}

function pr_debug()
{
    [ "${DEBUG}" -eq 0 ] || echo -e "\033[36m${*}\033[0m"

}

function pr_error()
{
    echo -e "\033[31mError: ${*}\033[0m" >&2
	exit 1

}

function align()
{
	local val=${1} align=${2}

	echo $(((val / align + 1) * align))
}

function part_name()
{
	local dev

	IFS=':' read -r -a dev <<< "${1}"

	if [[ "${dev[0]}" = *[0-9] ]] ; then
		echo "${dev[0]}p${dev[1]}"
	else
		echo "${dev[0]}${dev[1]}"
	fi
}

function probe_dev()
{
	local dev=${1}
	local nr start size ptype

	while IFS=' ' read -r nr start size ptype ; do
		echo "${nr} ${start} ${size} ${ptype#0x}"
	done < <(partx -g -o NR,START,SECTORS,TYPE "${dev}")
}

function losetup_attach()
{
	local img=${1}

	pr_info "Attaching ${img} to a loop device"

	LOOPDEV=$(losetup --show --partscan --find "${img}")
	pr_debug "LOOPDEV: ${LOOPDEV}"
}

function losetup_detach()
{
	if [ -z "${LOOPDEV}" ] ; then
		return
	fi

	pr_info "Detaching image from ${LOOPDEV}"

	losetup --detach "${LOOPDEV}"
	LOOPDEV=
}

function mount_dev()
{
	local dev

	pr_info "Mounting ${1}"

	IFS=':' read -r -a dev <<< "${1}"

	if [ -f "${dev[0]}" ] ; then
		# It's an image file, so attach it to a loop device
		losetup_attach "${dev[0]}"
		dev[0]=${LOOPDEV}
	fi

	MOUNTPOINT=$(mktemp -d --tmpdir raspi-image-XXXXXX)
	mount "$(part_name "${dev[0]}:${dev[1]}")" "${MOUNTPOINT}"
}

function umount_dev()
{
	if [ -z "${MOUNTPOINT}" ] ; then
		return
	fi

	pr_info "Unmounting ${MOUNTPOINT}"

	umount "${MOUNTPOINT}" || umount -l "${MOUNTPOINT}"
	rmdir "${MOUNTPOINT}"
	MOUNTPOINT=

	losetup_detach
}

function format_dev()
{
	local fstype=${2} label=${3}
	local dev

	pr_info "Formatting ${1} (fstype=${fstype}, label=${label})"

	IFS=':' read -r -a dev <<< "${1}"

	if [ -f "${dev[0]}" ] ; then
		# It's an image file, so attach it to a loop device
		losetup_attach "${dev[0]}"
		dev[0]=${LOOPDEV}
	fi

	"mkfs.${fstype}" -n "${label}" "$(part_name "${dev[0]}:${dev[1]}")"

	losetup_detach
}

function label_dev()
{
	local fstype=${2} label=${3}
	local dev

	pr_info "Labeling ${1} (${fstype}, ${label})"

	IFS=':' read -r -a dev <<< "${1}"

	if [ -f "${dev[0]}" ] ; then
		# It's an image file, so attach it to a loop device
		losetup_attach "${dev[0]}"
		dev[0]=${LOOPDEV}
	fi

	"${fstype}label" "$(part_name "${dev[0]}:${dev[1]}")" "${label}"

	losetup_detach
}

function __shellcheck() { local dev; }   # Hack to silence shellcheck

function sfdisk_dev()
{
	local dev=${1} sfdisk_in=${2}
	local opts

	pr_info "Updating the partition table of ${dev}"

	# Exit if this is a dry-run
	if [ "${DRY_RUN}" -eq 1 ] ; then
		cat "${sfdisk_in}"
	fi
	dry_run_exit

	# Options for sfdisk
	opts=()
	if [ "${FORCE}" -eq 1 ] ; then
		opts+=("-f")
	fi
	if [ "${DEBUG}" -eq 0 ] ; then
		opts+=("-q")
	fi

	# Update the partition table
	sfdisk "${opts[@]}" "${dev}" < "${sfdisk_in}"

	# Rewrite the partition table to make sure the disk ID is correct
	sfdisk -d "${dev}" > sfdisk.dump
	sed -i "s,^label-id: .*,label-id: 0x${DISK_UUID}," sfdisk.dump
	sfdisk "${opts[@]}" "${dev}" < sfdisk.dump

	# Re-read the modified partition table
	if [ -b "${dev}" ] ; then
		partprobe -s "${dev}"

		# FIXME: (juergh) A subsequent call of format_dev might fail, so wait some
		sleep 2
	fi
}

function copy_dev()
{
	local src=${1} dst=${2}

	# Create a temporary directory
	TMPDIR=$(mktemp -d --tmpdir raspi-image-XXXXXX)

	# Copy the source to the temporary directory
	mount_dev "${src}"
	rsync -a --delete "${MOUNTPOINT}"/ "${TMPDIR}"/
	umount_dev

	# Copy the temporary directory to the destination
	mount_dev "${dst}"
	rsync -a --delete "${TMPDIR}"/ "${MOUNTPOINT}"/
	umount_dev

	# Remove the temporary directory
	rm -rf "${TMPDIR}"
	TMPDIR=
}

function dd_dev()
{
	local src dst dd_opts src_part dst_part

	pr_info "Copying device/partition ${1} to ${2}"

	IFS=':' read -r -a src <<< "${1}"
	IFS=':' read -r -a dst <<< "${2}"

	src_part=()
	dst_part=()
	dd_opts=("if=${src[0]}" "of=${dst[0]}" "bs=512" "conv=notrunc,fsync")

	# Source partition details
	pr_debug "src: ${src[*]}"
	IFS=' ' read -r -a src_part < <(probe_dev "${src[0]}" | \
										grep "^${src[1]} ")
	pr_debug "src_part: ${src_part[*]}"
	dd_opts+=("skip=${src_part[1]}" "count=${src_part[2]}")

	# Destination partition details
	pr_debug "dst: ${dst[*]}"
	IFS=' ' read -r -a dst_part < <(probe_dev "${dst[0]}" | \
										grep "^${dst[1]} ")
	pr_debug "dst_part: ${dst_part[*]}"
	dd_opts+=("seek=${dst_part[1]}")

	pr_debug "dd_opts: ${dd_opts[*]}"

	# Check that the destination partition is big enough
	if [ "${#src_part[@]}" -gt 1 ] && [ "${#dst_part[@]}" -gt 1 ] && \
		   [ "${src_part[2]}" -gt "${dst_part[2]}" ] ; then
		pr_error "Destination partition is too small"
	fi

	# Exit if this is a dry-run
	dry_run_exit

	# Copy the partition
	dd "${dd_opts[@]}"

	# FIXME: (juergh) A subsequent call of label_dev might fail, so wait some
	sleep 2
}

function build_uboot_scr()
{
	local script=${1}

	pr_info "Building u-boot script ${script%.txt}"

	mkimage -A arm -T script -C none -n 'u-boot script' -d "${script}" \
			"${script%.txt}"
}

function config_boot()
{
	local dev=${1}

	if [ "${UBOOT}" -eq 0 ] ; then
		# Nothing to do if we don't use u-boot
		return
	fi

	# Configure the boot partition
	pr_info "Configuring the boot partition ${dev}:1"
	mount_dev "${dev}:1"

	# Copy the custom boot files
	cp boot/boot.scr.txt boot/config.txt boot/uboot_*.bin \
	   "${MOUNTPOINT}"/
	rm -f "${MOUNTPOINT}"/uboot_*.env

	# Build the u-boot boot script
	build_uboot_scr "${MOUNTPOINT}"/boot.scr.txt

	umount_dev
}

function config_os()
{
	local dev boot_num boot_uuid rootfs_num rootfs_uuid scr num

	IFS=':' read -r -a dev <<< "${1}"

	# The boot and rootfs partition numbers and labels
	boot_num=${dev[1]}
	boot_uuid=$(printf "%s-%02d" "${DISK_UUID}" "${boot_num}")
	rootfs_num=$((boot_num + 1))
	rootfs_uuid=$(printf "%s-%02d" "${DISK_UUID}" "${rootfs_num}")

	# Configure the OS rootfs partition
	pr_info "Configuring the OS rootfs partition ${dev[0]}:${rootfs_num}"
	mount_dev "${dev[0]}:${rootfs_num}"

	# Get the OS release information
	# shellcheck disable=SC1090
	.  "${MOUNTPOINT}"/etc/os-release
	pr_info "Found a '${PRETTY_NAME}' OS"

	# Fix /etc/fstab
	# Raspbian: - Fix the PARTUUIDs
	# Ubuntu:   - Replace the filesystem labels with PARTUUIDs
	sed -i -e "s,PARTUUID=[0-9a-f]*-01,PARTUUID=${boot_uuid}," \
		   -e "s,LABEL=system-boot,PARTUUID=${boot_uuid}," \
		   "${MOUNTPOINT}"/etc/fstab
	sed -i -e "s,PARTUUID=[0-9a-f]*-02,PARTUUID=${rootfs_uuid}," \
		   -e "s,LABEL=cloudimg-rootfs,PARTUUID=${rootfs_uuid}," \
		   "${MOUNTPOINT}"/etc/fstab

	# Inject the raspi-<foo> scripts
	for scr in raspi-image raspi-reboot ; do
		if [ -f "${scr}" ] ; then
			cp "${scr}" "${MOUNTPOINT}"/sbin/
		elif command -v "scr" >/dev/null ; then
			cp "$(command -v "${scr}")" "${MOUNTPOINT}"/sbin/
		fi
	done

	umount_dev

	# Configure the OS boot partition
	pr_info "Configuring the OS boot partition ${dev[0]}:${boot_num}"
	mount_dev "${dev[0]}:${boot_num}"

	if [ "${UBOOT}" -eq 0 ] ; then
		# Fix cmdline.txt
		# Raspbian: - Fix the root device
		#           - Don't boot into the resize script
		#           - Remove quiet
		#           - Fix the serial console (serial0 -> ttyAMA0)
		# Ubuntu:   - Fix the root device
		sed -i -e "s,PARTUUID=[0-9a-f]*-02,PARTUUID=${rootfs_uuid}," \
			   -e "s, init=/usr/lib/raspi-config/init_resize\.sh,," \
			   -e "s, quiet,," \
			   -e "s,console=serial0,console=ttyAMA0," \
			   -e "s,root=/dev/mmcblk0p2,root=PARTUUID=${rootfs_uuid}," \
			   "${MOUNTPOINT}"/cmdline.txt

	else
		# Copy (and build) the u-boot boot script
		sed -e "s,__BOOT_NUM__,${boot_num}," \
			-e "s,__ROOTFS_UUID__,${rootfs_uuid}," \
			boot/"${ID}"/boot.scr.txt > "${MOUNTPOINT}"/boot.scr.txt
		build_uboot_scr  "${MOUNTPOINT}"/boot.scr.txt
	fi

	umount_dev

	# Configure the disk boot partition
	pr_info "Configuring the boot partition ${dev[0]}:1"

	if [ "${UBOOT}" -eq 0 ] ; then
		# Sync the OS boot partition to the disk boot partition
		pr_info "Copying boot files from ${dev[0]}:${boot_num} to ${dev[0]}:1"
		copy_dev "${dev[0]}:${boot_num}" "${dev[0]}:1"

	else
		# Add the OS to the u-boot multiboot menu
		pr_info "Adding '${PRETTY_NAME}' to the u-boot multiboot menu"

		mount_dev "${dev[0]}:1"

		num=$((((boot_num - 5)) / 2))
		sed -i "s,^.*setenv x_title${num}.*,setenv x_title${num} \"${PRETTY_NAME}\"," \
			"${MOUNTPOINT}"/boot.scr.txt
		build_uboot_scr "${MOUNTPOINT}"/boot.scr.txt

		umount_dev
	fi
}

# -----------------------------------------------------------------------------
# Main worker functions

function init_dev()
{
	local dev=${1}
	local dev_size
	local boot_part boot_start boot_size boot_type
	local ext_part ext_start ext_size ext_type
	local guard_part guard_start

	pr_info "Initializing device ${dev}"

	# Get the size of the device (in #sectors)
	dev_size=$(sfdisk -s "${dev}")
	if [ -z "${dev_size}" ] ; then
		pr_error "Unable to get size of device ${dev}"
	fi
	dev_size=$((dev_size * 1024 / 512))
	pr_debug "dev_size: ${dev_size}"

	# The (custom/multiboot) boot partition
	boot_part=$(part_name "${dev}:1")
	boot_start=${BOOT_START}
	boot_size=$((BOOT_SIZE * 1024 * 1024 / 512))
	boot_type=c
	pr_debug "boot: start ${boot_start}, size ${boot_size}," \
			 "type ${boot_type}"

	# The extended partition
	ext_part=$(part_name "${dev}:2")
	ext_start=$(align "$((boot_start + boot_size))" 4096)
	ext_size=$((dev_size - ext_start))
	ext_type=5
	pr_debug "ext: start ${ext_start}, size ${ext_size}," \
			 "type ${ext_type}"

	# The start of the 'guard' partition
	guard_part=$(part_name "${dev}:5")
	guard_start=$(align "${ext_start}" 4096)

	# Create the input file for sfdisk
	cat <<EOF >sfdisk.in
label: dos
label-id: 0x${DISK_UUID}
device: ${dev}
unit: sectors

${boot_part} : start=${boot_start}, size=${boot_size}, type=${boot_type}, bootable
${ext_part} : start=${ext_start}, size=${ext_size}, type=${ext_type}
${guard_part} : start=${guard_start}, size=2048, type=83
EOF

	# Update the partition table
	sfdisk_dev "${dev}" sfdisk.in

	# Format the boot partition
	format_dev "${dev}:1" vfat boot

	if [ "${UBOOT}" -eq 0 ] ; then
		# All done if we don't use u-boot
		return
	fi

	# Clone the Raspberry Pi firmware repo
	if ! [ -d rpi-firmware ] ; then
		pr_info "Clonig the Raspberry firmware repo"
		git clone https://github.com/raspberrypi/firmware.git rpi-firmware
	else
		cd rpi-firmware
		git clean -dxf
		git pull
		cd ..
	fi

	# Copy the boot files
	pr_info "Copying boot files from rpi-firmware/boot to ${dev}:1"
	mount_dev "${dev}:1"
	cp -r rpi-firmware/boot/. "${MOUNTPOINT}"/
	umount_dev

	# Configure the boot partition
	config_boot "${dev}"
}

function add_os()
{
	local dev=${1} img=${2}
	local dev_last img_parts img_boot img_rootfs
	local boot_num boot_part boot_start boot_size boot_type
	local rootfs_num rootfs_part rootfs_start rootfs_size rootfs_type
	local guard_num guard_part guard_start

	# Get the guard (last) partition information from the device
	IFS=' ' read -r -a dev_last <<< "$(probe_dev "${dev}" | tail -1)"
	pr_debug "dev_last: ${dev_last[*]}"

	# Get the partition information from the OS image
	readarray -t img_parts < <(probe_dev "${img}")
	IFS=' ' read -r -a img_boot <<< "${img_parts[0]}"
	IFS=' ' read -r -a img_rootfs <<< "${img_parts[1]}"
	pr_debug "img_boot: ${img_boot[*]}"
	pr_debug "img_rootfs: ${img_rootfs[*]}"

	# The new OS boot partition
	boot_num=${dev_last[0]}
	boot_part=$(part_name "${dev}:${boot_num}")
	boot_start=${dev_last[1]}
	boot_size=$((BOOT_SIZE * 1024 * 1024 / 512))
	boot_type=c

	# The new OS rootfs partition
	rootfs_num=$((boot_num + 1))
	rootfs_part=$(part_name "${dev}:${rootfs_num}")
	rootfs_start=$(align "$((boot_start + boot_size))" 4096)
	rootfs_size=$((ROOTFS_SIZE * 1024 * 1024 / 512))
	rootfs_type=${img_rootfs[3]}

	# The new guard partition
	guard_num=$((rootfs_num + 1))
	guard_part=$(part_name "${dev}:${guard_num}")
	guard_start=$(align "$((rootfs_start + rootfs_size))" 4096)

	# Create the input file for sfdisk
	sfdisk -d "${dev}" | head -n -1 > sfdisk.in
	cat <<EOF >> sfdisk.in
${boot_part} : start=${boot_start}, size=${boot_size}, type=${boot_type}
${rootfs_part} : start=${rootfs_start}, size=${rootfs_size}, type=${rootfs_type}
${guard_part} : start=${guard_start}, size=2048, type=83
EOF

	# Update the partition table
	sfdisk_dev "${dev}" sfdisk.in

	# Format the new OS boot partition and label it
	format_dev "${dev}:${boot_num}" vfat "boot-${boot_num}"

	# Copy the boot files from the OS image to the device
	pr_info "Copying boot files from ${img}:1 to ${dev}:${boot_num}"
	copy_dev "${img}:1" "${dev}:${boot_num}"

	# Copy the rootfs partition from the OS image to the device
	dd_dev "${img}:2" "${dev}:${rootfs_num}"

	# Relabel the rootfs partition
	label_dev "${dev}:${rootfs_num}" e2 "rootfs-${rootfs_num}"

	# Configure the new OS
	config_os "${dev}:${boot_num}"
}

function config_dev()
{
	local dev

	pr_info "Configuring device ${1}"

	IFS=':' read -r -a dev <<< "${1}"
	if [ ${#dev[@]} -eq 1 ] ; then
		dev[1]=1
	fi

	if [ "${dev[1]}" = "1" ] ; then
		config_boot "${dev[0]}"
	else
		config_os "${1}"
	fi
}

# -----------------------------------------------------------------------------
# Commands

function do_init()
{
	if [ $# -ne 1 ] ; then
		usage
		exit 2
	fi

	init_dev "${@}"
}

function do_add()
{
	if [ $# -ne 2 ] ; then
		usage
		exit 2
	fi

	add_os "${@}"
}

function do_config()
{
	if [ $# -ne 1 ] ; then
		usage
		exit 2
	fi

	config_dev "${@}"
}

function usage()
{
	trap - EXIT INT TERM HUP

	cat <<EOF
Usage: raspi-image [-d] [-f] [-h] [-r] [-u] COMMAND [OPTIONS]

Supported commands
  init DEVICE    Initialize the device DEVICE.
  add DEVICE OS_IMAGE
                 Add the OS from OS_IMAGE to the device DEVICE.
  config DEVICE[:PARTITION]
                 Configure partition PARTITION of device DEVICE. If not
                 specified, PARTITION defaults to 1.

Positional arguments:
  -d, --debug    Enable debugging output.
  -f, --force    Disable consistency checks.
  -h, --help     Show this help text and exit.
  -r, --dry-run  Dry run mode. If specified, no modifcations of a device/image
                 are made.
  -u, --uboot    Use the u-boot bootlader and a u-boot multiboot bootmenu.
EOF
}

# -----------------------------------------------------------------------------
# Main entry point

if [ "$(id -u)" -ne 0 ] ; then
	echo "You need to be root to run this script"
	exit 1
fi

DEBUG=0
DRY_RUN=0
FORCE=0
UBOOT=0
cmd=
cmd_opts=()

while [ $# -gt 0 ] ; do
	case "${1}" in
		-d|--debug)
			DEBUG=1
			;;
		-f|--force)
			FORCE=1
			;;
		-h|--help)
			usage
			exit
			;;
		-r|--dry-run)
			DRY_RUN=1
			;;
		-u|--uboot)
			UBOOT=1
			;;
		-*)
			pr_error "Unexpected argument: ${1}"
			;;
		*)
			cmd=${1}
			shift
			cmd_opts=("${@}")
			break
	esac
	shift
done

case "${cmd}" in
	init|add|config)
		true
		;;
	*)
		usage
		exit 2
		;;
esac

MOUNTPOINT=
LOOPDEV=
TMPDIR=
trap out EXIT INT TERM HUP

"do_${cmd}" "${cmd_opts[@]}"
